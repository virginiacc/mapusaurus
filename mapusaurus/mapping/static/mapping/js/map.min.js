"use strict";

function initCalls(geoQueryType) {
    var gt = geoQueryType, action = getActionTaken($("#action-taken-selector option:selected").val());
    "selected" === gt ? (blockStuff(), $.when(getTractsInBounds(!1, !1), getTractData(action, !1, !1)).done(function(data1, data2) {
        init(data1, data2);
    })) : "all_msa" === gt ? (blockStuff(), $.when(getTractsInBounds(getBoundParams(), "msa"), getTractData(action, getBoundParams(), "msa")).done(function(data1, data2) {
        init(data1, data2);
    })) : "all" === gt && (blockStuff(), $.when(getTractsInBounds(getBoundParams(), !1), getTractData(action, getBoundParams(), !1)).done(function(data1, data2) {
        init(data1, data2);
    }));
}

function init(data1, data2) {
    var hashInfo = getHashParams(), layerInfo = getLayerType(hashInfo.category.values);
    rawGeo = data1[0], rawData = data2[0], createTractDataObj(), redrawCircles(dataStore.tracts, layerInfo.type), 
    buildKeyCircles(), $.when(getMsasInBounds()).done(function(data) {
        msaArray = data;
    }), $.unblockUI(), isUIBlocked = !1;
}

function getTractsInBounds(bounds, geoType) {
    $("#bubbles_loading").show();
    var endpoint = "/api/tractCentroids/", params = {};
    return bounds && "object" == typeof bounds && (params.neLat = bounds.neLat, params.neLon = bounds.neLon, 
    params.swLat = bounds.swLat, params.swLon = bounds.swLon), geoType && (params.geoType = geoType), 
    urlParam("metro") ? params.metro = urlParam("metro") : console.log("No metro area provided"), 
    urlParam("lender") ? (params.lender = urlParam("lender"), $.ajax({
        url: endpoint,
        data: params,
        traditional: !0,
        success: console.log("tract Get successful")
    }).fail(function(status) {
        console.log("no data was available at" + endpoint + ". status: " + status), $.unblockUI(), 
        isUIBlocked = !1;
    })) : (console.log(" Lender parameter is required."), !1);
}

function getTractData(actionTakenVal, bounds, geoType) {
    $("#bubbles_loading").show();
    var endpoint = "/api/all/", params = {
        year: 2013,
        lh: !1,
        peers: !1,
        geo_type: geoType
    };
    bounds && "object" == typeof bounds && (params.neLat = bounds.neLat, params.neLon = bounds.neLon, 
    params.swLat = bounds.swLat, params.swLon = bounds.swLon), geoType && (params.geoType = geoType);
    var hash = getHashParams();
    return "undefined" != typeof hash.lh && (params.lh = hash.lh.values), "undefined" != typeof hash.peers && (params.peers = hash.peers.values), 
    urlParam("year") && (params.year = urlParam("year")), urlParam("metro") ? params.metro = urlParam("metro") : console.log("No metro area provided"), 
    urlParam("lender") ? (params.lender = urlParam("lender"), actionTakenVal ? params.action_taken = actionTakenVal : console.log("No action taken value - default (1-5) will be used."), 
    $.ajax({
        url: endpoint,
        data: params,
        traditional: !0,
        success: console.log("get API All Data request successful")
    }).fail(function(status) {
        console.log("no data was available at" + endpoint + ". status: " + status), $.unblockUI(), 
        isUIBlocked = !1;
    })) : (console.log(" Lender parameter is required."), !1);
}

function getMsasInBounds() {
    var endpoint = "/api/msas", params = {}, bounds = getBoundParams();
    return params.neLat = bounds.neLat, params.neLon = bounds.neLon, params.swLat = bounds.swLat, 
    params.swLon = bounds.swLon, $.ajax({
        url: endpoint,
        data: params,
        traditional: !0,
        success: function(data) {}
    }).fail(function(status) {
        console.log("no MSA data was available at" + endpoint + ". status: " + status), 
        $.unblockUI(), isUIBlocked = !1;
    });
}

function getBranchesInBounds(bounds) {
    var endpoint = "/api/branchLocations/", params = {
        neLat: bounds.neLat,
        neLon: bounds.neLon,
        swLat: bounds.swLat,
        swLon: bounds.swLon
    };
    return urlParam("lender") ? (params.lender = urlParam("lender"), $.ajax({
        url: endpoint,
        data: params,
        traditional: !0,
        success: console.log("Branch Location Get successful")
    }).fail(function(status) {
        console.log("no data was available at" + endpoint + ". status: " + status);
    })) : (console.log(" Lender parameter is required."), !1);
}

function redrawCircles(geoData) {
    $("#bubbles_loading").show(), layers.Centroids.clearLayers(), _.each(geoData, function(geo) {
        drawCircle(geo);
    });
}

function drawCircle(geo, options) {
    var style, data = geo;
    style = 0 === geo.total_pop || 0 === geo.volume ? noStyle : baseStyle;
    var circle = L.circle([ geo.centlat, geo.centlon ], hmdaStat(data), style);
    circle.geoid = geo.geoid, circle.volume = geo.volume, circle.type = "tract-circle", 
    circle.keyCircle = 0, "undefined" != typeof options && (circle.keyCircle = options.keyCircle), 
    circle.on("mouseover mousemove", function(e) {
        var hisp, white, black, asian;
        hisp = (100 * data.hispanic_perc).toFixed(2), white = (100 * data.non_hisp_white_only_perc).toFixed(2), 
        black = (100 * data.non_hisp_black_only_perc).toFixed(2), asian = (100 * data.non_hisp_asian_only_perc).toFixed(2), 
        new L.Rrose({
            offset: new L.Point(0, 0),
            closeButton: !1,
            autoPan: !1,
            y_bound: 160
        }).setContent('<div class="bubble-header"><b>Tract ' + circle.geoid + '</div><div><span class="circle-hover-label">' + data.volume + '</span></b> LAR<br/><b><span class="circle-hover-label">' + data.num_households + "</span></b> Households</div>").setLatLng(e.latlng).openOn(map);
    }), circle.on("mouseout", function() {
        map.closePopup();
    }), layers.Centroids.addLayer(circle);
}

function drawMarker(data) {
    var myIcon = L.icon({
        iconUrl: "/static/basestyle/img/branch-marker_off.png",
        iconSize: [ 8, 8 ]
    }), myIconHover = L.icon({
        iconUrl: "/static/basestyle/img/branch-marker_on.png",
        iconSize: [ 8, 8 ]
    }), marker = L.marker([ data.lat, data.lon ], {
        icon: myIcon
    });
    marker.on("mouseover mousemove", function(e) {
        this.setIcon(myIconHover), new L.Rrose({
            offset: new L.Point(0, 0),
            closeButton: !1,
            autoPan: !1
        }).setContent('<div class="branch-marker">' + data.name + "<br/>" + data.city).setLatLng(e.latlng).openOn(map);
    }), marker.on("mouseout", function(e) {
        this.setIcon(myIcon), map.closePopup();
    }), layers.Branches.addLayer(marker);
}

function buildKeyCircles() {
    var selector = (getHashParams(), $("#keySvg"));
    selector.html("");
    var circles = getRange(map._layers);
    if (0 === circles.length) return selector.html("No records found"), !1;
    for (var $scale = $("#action-taken-selector option:selected"), posx = ($scale.data("scale"), 
    0), rad = 0, maxRad = _.max(circles, function(circleObj) {
        return circleObj._radius;
    })._radius, posy = 2 * maxRad, textPosy = posy + 16, svgStr = '<svg height="' + (2 * maxRad + 20) + '">', i = 0; i < circles.length; i++) {
        var circle = circles[i];
        rad = circle._radius, posx += 45, svgStr += '<circle cx="' + posx + '" cy="' + (posy - rad) + '" r="' + rad + '" fillColor="#111111" fill-opacity=".7" stroke=false color="#333"/>', 
        svgStr += '<text x="' + posx + '" y="' + textPosy + '" font-size="1em" text-anchor="middle">' + circle.volume + "</text>";
    }
    svgStr += "</svg>", selector.html(svgStr);
}

function getRange(data) {
    var circles = _.matches({
        type: "tract-circle"
    }), circleFilter = _.filter(data, circles);
    if (0 === circleFilter.length) return valArray = [];
    var keyCircles, keyCirclesFilter, valArray, max = _.max(data, function(circleObj) {
        return circleObj._mRadius;
    }), min = _.min(data, function(circleObj) {
        return circleObj._mRadius;
    }), multiple = (max.volume - min.volume) / 2, drawNewArray = [ min.volume + multiple ];
    return max.volume < 2 && max.volume > 0 ? valArray = [ max ] : 0 === max.volume ? valArray = [] : (0 === min.volume ? (min = {
        volume: 1
    }, drawNewArray = [ min.volume, min.volume + multiple, max.volume ], _.each(drawNewArray, function(val, i) {
        addKeyLayerCircle(val, i);
    }), keyCircles = _.matches({
        keyCircle: 1
    }), keyCirclesFilter = _.filter(data, keyCircles), valArray = [ keyCirclesFilter[0], keyCirclesFilter[1], max ]) : (_.each(drawNewArray, function(val, i) {
        addKeyLayerCircle(val, i);
    }), keyCircles = _.matches({
        keyCircle: 1
    }), keyCirclesFilter = _.filter(data, keyCircles), valArray = [ min, keyCirclesFilter[0], max ]), 
    max.volume < 5 && (valArray = [ valArray[0], valArray[2] ]), valArray);
}

function addKeyLayerCircle(volume, index) {
    var geo = {
        volume: Math.round(volume),
        centlat: map.getCenter().lat,
        centlon: 1,
        geoid: index
    }, options = {
        keyCircle: 1
    };
    drawCircle(geo, options);
}

function drawBranches() {
    $.when(getBranchesInBounds(getBoundParams())).then(function(branches) {
        $.each(branches.features, function(i, val) {
            drawMarker(val.properties);
        });
    });
}

function createTractDataObj(callback) {
    var count = 0;
    dataStore.tracts = {}, _.each(rawGeo.features, function(feature, key) {
        var geoid = feature.properties.geoid;
        dataStore.tracts[geoid] = feature.properties, _.extend(dataStore.tracts[geoid], rawData.minority[geoid]), 
        "undefined" != typeof rawData.loanVolume[geoid] ? _.extend(dataStore.tracts[geoid], rawData.loanVolume[geoid]) : dataStore.tracts[geoid].volume = 0, 
        pctMinority.push(1 - rawData.minority[geoid].non_hisp_white_only_perc);
        var loanVolume = rawData.loanVolume[geoid];
        larVolume.push(_.isUndefined(loanVolume) ? 0 : loanVolume.volume / loanVolume.num_households * 1e3), 
        count++;
    }), "function" == typeof callback && callback() && callback();
}

function setMapHeight() {
    var viewportHeight = $(window).height(), warningBannerHeight = $("#warning-banner").outerHeight(), headerHeight = $("#header").outerHeight(), mapHeaderHeight = $("#map-header").outerHeight(), combinedHeadersHeight = warningBannerHeight + headerHeight + mapHeaderHeight, mapHeight = viewportHeight - combinedHeadersHeight;
    $("#map-aside").css("height", mapHeight), $("#map-container").css("height", mapHeight), 
    showDataContainer ? ($(".map-container").css({
        height: .5 * mapHeight + combinedHeadersHeight,
        overflow: "hidden"
    }), $("#map").css("height", .5 * mapHeight), $("#map-aside").css("height", .5 * mapHeight), 
    $("#data-container").css("height", .5 * mapHeight - 5), $("body").addClass("show-data")) : ($("#map-aside").css("height", mapHeight), 
    $(".map-container").css("height", "auto"), $("#map").css("height", mapHeight), $("body").removeClass("show-data"));
}

function toggleSuper(status) {
    var url = $("#download-data").data("super-download"), origUrl = $("#download-data").data("download");
    status ? ($("#lender-affiliate-list").removeClass("hidden"), $("#lender-affiliates").addClass("green-highlight"), 
    $("#download-data").attr("href", url), $("#branchSelect").prop("checked") ? $(".tooltipsy.branch-component").addClass("red-highlight") : $(".tooltipsy.branch-component").removeClass("red-highlight")) : ($("#lender-affiliate-list").addClass("hidden"), 
    $("#lender-affiliates").removeClass("green-highlight"), $("#download-data").attr("href", origUrl)), 
    addParam("lh", status), $("#superSelect").prop("checked", status);
}

function toggleBranches(status) {
    status ? (drawBranches(), $("#branchKey").removeClass("hidden"), $(".tooltipsy.branch-component").removeClass("hidden"), 
    $("#lender-branches").addClass("green-highlight")) : (layers.Branches.clearLayers(), 
    $("#branchKey").addClass("hidden"), $(".tooltipsy.branch-component").addClass("hidden"), 
    $("#lender-branches").removeClass("green-highlight")), addParam("branches", status), 
    $("#branchSelect").prop("checked", status);
}

function togglePeers(status) {
    var url = $("#download-data").data("peer-download"), origUrl = $("#download-data").data("download");
    status ? ($("#lender-peers-list").removeClass("hidden"), $(".peers-of-true").removeClass("hidden"), 
    $("#lender-peers").addClass("green-highlight"), $(".tooltipsy.peer-component").removeClass("hidden"), 
    $("#download-data").attr("href", url)) : ($("#lender-peers-list").addClass("hidden"), 
    $("#lender-peers").removeClass("green-highlight"), $(".peers-of-true").addClass("hidden"), 
    $(".tooltipsy.peer-component").addClass("hidden"), $("#download-data").attr("href", origUrl)), 
    addParam("peers", status), getPeerLinks(), $("#peerSelect").prop("checked", status);
}

function blockStuff() {
    return isUIBlocked === !0 ? !1 : (isUIBlocked = !0, void $.blockUI({
        css: {
            border: "none",
            padding: "15px",
            backgroundColor: "#000",
            "-webkit-border-radius": "10px",
            "-moz-border-radius": "10px",
            opacity: .5,
            color: "#fff"
        },
        message: '<img src="/static/basestyle/img/loading_white.gif" height="75px"> <h6>Loading HMDA Data</h6>',
        overlayCSS: {
            backgroundColor: "#000",
            opacity: 0,
            cursor: "wait"
        }
    }));
}

function hmdaStat(tractData) {
    var $selected = $("#action-taken-selector option:selected"), scale = ($selected.val(), 
    $selected.data("scale")), area = scale * tractData.volume;
    return Math.sqrt(area);
}

function layerUpdate(layer) {
    var layerEval, mbLayer, layerType, keyPath;
    if (!layer) return console.log("The layer you've requested does not exist: ", layer), 
    !1;
    for (var i = minorityLayers.length - 1; i >= 0; i--) map.removeLayer(minorityLayers[i]);
    layerEval = getLayerType(layer), mbLayer = layerEval.layer, layerType = layerEval.type, 
    keyPath = layerEval.keyPath, keyPath ? ($("#altScaleImg").attr("src", keyPath), 
    $("#altScale").removeClass("hidden"), $("#scale").addClass("hidden")) : ($("#altScale").addClass("hidden"), 
    $("#scale").removeClass("hidden")), map.addLayer(mbLayer), mbLayer.bringToFront(), 
    layers.Water.bringToFront(), layers.Boundaries.bringToFront(), layers.CountyLabels.bringToFront(), 
    map.hasLayer(layers.MSALabels) && layers.MSALabels.bringToFront(), addParam("category", layer);
}

function getLayerType(layer) {
    var type, keyPath;
    switch (layer) {
      case "inv_non_hisp_white_only_perc":
        layer = layers.PctMinority, type = "seq", keyPath = "/static/basestyle/img/key_pct-minority.png";
        break;

      case "hispanic_perc":
        layer = layers.PctHispanic, type = "seq", keyPath = "/static/basestyle/img/key_pct-hisp.png";
        break;

      case "non_hisp_black_only_perc":
        layer = layers.PctBlack, type = "seq", keyPath = "/static/basestyle/img/key_pct-black.png";
        break;

      case "non_hisp_asian_only_perc":
        layer = layers.PctAsian, type = "seq", keyPath = "/static/basestyle/img/key_pct-asian.png";
        break;

      case "non_hisp_white_only_perc":
        layer = layers.PctNonWhite, type = "seq", keyPath = "/static/basestyle/img/key_pct-white.png";
        break;

      case "plurality":
        layer = layers.Plurality, type = "seq", keyPath = "/static/basestyle/img/key_min-plurality.png";
        break;

      default:
        layer = layers.PctMinority, type = "seq", keyPath = !1;
    }
    return {
        type: type,
        layer: layer,
        keyPath: keyPath
    };
}

function urlParam(field) {
    var url = window.location.search.replace("?", ""), keyValueStrs = url.split("&"), pairs = _.map(keyValueStrs, function(keyValueStr) {
        return keyValueStr.split("=");
    }), params = _.reduce(pairs, function(soFar, pair) {
        return 2 === pair.length && (soFar[pair[0]] = pair[1]), soFar;
    }, {});
    return params[field];
}

function updatePrintLink() {
    $("#printLink").attr("href", "/map/print" + window.location.search + window.location.hash);
}

function getPeerLinks() {
    var peerList = $(".peer-link");
    $.each(peerList, function(i, val) {
        var instid = $(val).data("instid"), href = "/map/?metro=" + urlParam("metro") + "&lender=" + instid + window.location.hash.replace("&peers=true", "");
        $(val).attr("href", href);
    });
}

function updateCensusLink() {
    var actions = getHashParams(), actionVar = getActionTaken(actions.action.values);
    $("#downloadCensus").attr("href", "/census/race_summary_csv/?metro=" + urlParam("metro") + "&lender=" + urlParam("lender") + "&action_taken=" + actionVar);
}

function getActionTaken(value) {
    var actionTaken;
    switch (value) {
      case "all-apps-5":
        actionTaken = "1,2,3,4,5";
        break;

      case "all-apps-6":
        actionTaken = "1,2,3,4,5,6";
        break;

      case "originations-1":
        actionTaken = "1";
    }
    return actionTaken;
}

function getBoundParams() {
    var bounds = map.getBounds(), padding = 0;
    return {
        neLat: (bounds._northEast.lat + padding).toFixed(6),
        neLon: (bounds._northEast.lng + padding).toFixed(6),
        swLat: (bounds._southWest.lat - padding).toFixed(6),
        swLon: (bounds._southWest.lng - padding).toFixed(6)
    };
}

function getUniques(arr) {
    return _.uniq(arr);
}

function assignCat(catVal) {
    cat = catVal.toString(), catId = "#" + cat;
}

window.console || (console = {
    log: function() {}
});

var cat, catId, geoQueryType = "selected", showDataContainer, destroyLarChart, cat, catId, geoQueryType = "selected";

$(document).ready(function() {
    var lhStatus, peerStatus, branchStatus;
    $(".tabs").show(), $(window).resize(function() {
        setMapHeight();
    }), "undefined" != typeof loadParams.action ? $("#action-taken-selector").val(loadParams.action.values) : addParam("action", "all-apps-5"), 
    "undefined" != typeof loadParams.lh ? (lhStatus = "true" === loadParams.lh.values, 
    $("#superSelect").prop("checked", lhStatus), $("#peerSelect").prop("disabled", lhStatus), 
    toggleSuper(lhStatus)) : addParam("lh", !1), $("#superSelect").change(function() {
        var el = $("#superSelect"), status = el.prop("checked");
        toggleSuper(status), $("#peerSelect").prop("disabled", status), initCalls(geoQueryType);
    }), "undefined" != typeof loadParams.geo_query_type ? (geoQueryType = loadParams.geo_query_type.values, 
    $("#geoTypeQuerySelector").val(geoQueryType)) : addParam("geo_query_type", "selected"), 
    $("#geoTypeQuerySelector").change(function() {
        var el = $("#geoTypeQuerySelector");
        geoQueryType = el.val(), addParam("geo_query_type", geoQueryType), moveEndAction[geoQueryType]();
    }), "undefined" != typeof loadParams.branches ? (branchStatus = "true" === loadParams.branches.values, 
    $("#branchSelect").prop("checked", branchStatus), toggleBranches(branchStatus)) : addParam("branches", !1), 
    $("#branchSelect").change(function() {
        var el = $("#branchSelect"), status = el.prop("checked");
        toggleBranches(status);
    }), "undefined" != typeof loadParams.peers ? lhStatus === !0 ? ($("#peerSelect").prop("checked", !1), 
    console.log("Peer and Hierarchy cannot be checked at the same time. Unchecking Peers.")) : (peerStatus = "true" === loadParams.peers.values, 
    $("#peerSelect").prop("checked", peerStatus), $("#superSelect").prop("disabled", peerStatus), 
    togglePeers(peerStatus)) : addParam("peers", !1), $("#peerSelect").change(function() {
        var el = $("#peerSelect"), status = el.prop("checked");
        togglePeers(status), $("#superSelect").prop("disabled", status), initCalls(geoQueryType);
    }), $("#action-taken-selector").on("change", function() {
        addParam("action", $("#action-taken-selector option:selected").val()), initCalls(geoQueryType);
    }), $(".tooltipsy").tooltipsy({
        className: "bubbletooltip_tip",
        offset: [ 1, 0 ],
        show: function(e, $el) {
            $el.fadeIn(100);
        },
        hide: function(e, $el) {
            $el.fadeOut(450);
        }
    }), "undefined" != typeof loadParams.category ? (assignCat(loadParams.category.values), 
    layerUpdate(cat), $(catId).addClass("active-layer")) : (assignCat("inv_non_hisp_white_only_perc"), 
    layerUpdate(cat), $(catId).addClass("active-layer"));
    var categoryOptions = $(".map-divider-minor.option");
    categoryOptions.on("click", function(e) {
        categoryOptions.removeClass("active-layer");
        var selectedOption = $(this);
        assignCat(selectedOption.attr("id")), selectedOption.addClass("active-layer"), layerUpdate(cat);
    }), map.on("moveend", function(e) {
        $("#branchSelect").prop("checked") && toggleBranches(!0);
    }), map.on("moveend", function() {
        moveEndAction[geoQueryType]();
    }), map.on("zoomend", function() {
        buildKeyCircles();
    }), map.on("overlayadd", function() {
        map.hasLayer(layers.MSALabels) && layers.MSALabels.bringToFront();
    }), map.on("moveend", _.debounce(moveEndAction[geoQueryType], 500)), updatePrintLink(), 
    updateCensusLink(), layerUpdate(cat), $(window).on("hashchange", function() {
        updatePrintLink(), updateCensusLink();
    }), getPeerLinks(), initCalls(geoQueryType);
});

var msaArray = [], moveEndAction = {}, oldEndAction = geoQueryType;

moveEndAction.selected = function() {
    "selected" === oldEndAction ? console.log("No action required for 'selected' status. Nothing happens.") : (initCalls(geoQueryType), 
    oldEndAction = "selected");
}, moveEndAction.all_msa = function() {
    var oldMsaArray = msaArray.slice(0);
    "all_msa" === oldEndAction ? $.when(getMsasInBounds()).done(function(data) {
        var intersect = _.difference(data, oldMsaArray);
        intersect.length > 0 ? initCalls(geoQueryType) : 0 === intersect.length && console.log("No call required - MSAs are the same");
    }) : (initCalls(geoQueryType), oldEndAction = "all_msa");
}, moveEndAction.all = function() {
    initCalls(geoQueryType), oldEndAction = "all";
}, $(document).ready(function() {
    var pctBlack = $("#pct_blk"), pctBlackData = $(".pct-black-data"), pctHisp = $("#pct_hisp"), pctHispData = $(".pct-hispanic-data"), pctAsian = $("#pct_asian"), pctAsianData = $(".pct-asian-data"), pctWhite = $("#pct_white"), pctWhiteData = $(".pct-white-data"), pctMinority = $("#pct_min"), pctMinorityData = $(".pct-minority-data"), tractNumber = $(".tract-number"), tractPop = $(".tract-population");
    utfGrid.on("mouseover", function(e) {
        var d = e.data;
        d ? (pctMinority.text(d.pct_minv1), pctMinorityData.attr("data-min", d.pct_minv1), 
        pctMinorityData.css("width", (d.pct_minv1 / 100 * 85).toString() + "px"), pctMinorityData.css("background-color", "#5c9897"), 
        pctBlack.text(d.pct_blk), pctBlackData.attr("data-min", d.pct_blk), pctBlackData.css("width", (d.pct_blk / 100 * 85).toString() + "px"), 
        pctBlackData.css("background-color", "#7ea4be"), pctHisp.text(d.pct_hisp), pctHispData.attr("data-min", d.pct_hisp), 
        pctHispData.css("width", (d.pct_hisp / 100 * 85).toString() + "px"), pctHispData.css("background-color", "#c85954"), 
        pctAsian.text(d.pct_asian), pctAsianData.attr("data-min", d.pct_asian), pctAsianData.css("width", (d.pct_asian / 100 * 85).toString() + "px"), 
        pctAsianData.css("background-color", "#ff931a"), pctWhite.text(d.pct_white), pctWhiteData.attr("data-min", d.pct_white), 
        pctWhiteData.css("width", (d.pct_white / 100 * 85).toString() + "px"), pctWhiteData.css("background-color", "#b9babc")) : (pctBlack.text("No Data"), 
        pctBlackData.data("min", 0), pctHisp.text("No Data"), pctHispData.data("min", 0), 
        pctAsian.text("No Data"), pctAsianData.data("min", 0), pctWhite.text("No Data"), 
        pctWhiteData.data("min", 0)), tractNumber.text(d.tract), tractPop.text(d.tot_pop_et + " Persons");
    });
});

var rawGeo, rawLar, rawMinority, rawData, isUIBlocked = !1, larVolume = [], pctMinority = [], dataStore = {};

dataStore.tracts = {};

var baseStyle = {
    fillOpacity: .7,
    className: "lar-circle seq-circle",
    fillColor: "#111111",
    stroke: !1
}, noStyle = {
    stroke: !1,
    weight: 0,
    fill: !1
};